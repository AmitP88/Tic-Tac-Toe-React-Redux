{"version":3,"sources":["react.svg","redux.svg","actions/resetActions.js","reducers/choiceReducer.js","actions/choiceActions.js","reducers/boardReducer.js","actions/playerActions.js","actions/computerActions.js","reducers/winnerReducer.js","actions/winnerActions.js","reducers/renderReducer.js","actions/renderActions.js","store/store.js","components/ChoiceQuestion.js","components/ChoiceAnswer.js","components/Reset.js","components/Winner.js","components/Board.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","resetGame","type","choiceReducer","state","arguments","length","undefined","initialState","action","player","X","computer","O","choices","boardReducer","board","Object","toConsumableArray","slice","index","concat","winnerReducer","winner","endgame","renderReducer","ChoiceQuestion","ChoiceAnswer","Board","Winner","store","createStore","combineReducers","applyMiddleware","thunk","subscribe","getState","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChoice","bind","assertThisInitialized","e","preventDefault","target","id","dispatch","react_default","a","createElement","className","onClick","Component","connect","_Component","apply","inherits","createClass","key","value","Reset","handleReset","ReactModal","setAppElement","lib_default","isOpen","components_Reset","winning","availableCells","filter","cell","determineWinner","handleCellClick","computersTurn","humanPlayer","aiPlayer","currentBoard","availSpots","minimax","newBoard","score","bestMove","moves","i","move","result","push","bestScore","map","console","log","innerHTML","Footer","react_simple_tooltip_es","content","src","react","alt","redux","href","rel","App","es","components_ChoiceQuestion","components_ChoiceAnswer","components_Board","components_Winner","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb7449d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/redux.319affeb.svg\";","export const RESET = \"RESET\";\r\n\r\nconst resetGame = () => {\r\n    return {\r\n        type: RESET\r\n    }\r\n}\r\n\r\nexport default resetGame;","import { initialState, X, O } from '../store/store';\r\nimport { PLAYER_X, PLAYER_O } from '../actions/choiceActions';\r\nimport { RESET } from '../actions/resetActions';\r\n\r\nconst choiceReducer = (state = initialState, action) => {   \r\n    if(action.type === PLAYER_X){\r\n        return {\r\n            player: X,\r\n            computer: O\r\n        };\r\n    } else if(action.type === PLAYER_O){\r\n        return {\r\n            player: O,\r\n            computer: X\r\n        };\r\n    } else if(action.type === RESET){\r\n        return {\r\n            player: initialState.choices.player,\r\n            computer: initialState.choices.computer\r\n        }    \r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default choiceReducer;","export const PLAYER_X = \"PLAYER_X\";\r\nexport const PLAYER_O = \"PLAYER_O\";\r\n\r\n// Action creators for choiceReducer\r\nexport const choosePlayerX = () => {\r\n    return {\r\n        type: PLAYER_X\r\n    }\r\n};\r\n\r\nexport const choosePlayerO = () => {\r\n    return {\r\n        type: PLAYER_O\r\n    }\r\n};","// Player actions\r\nimport { \r\n    PLAYER_CHOOSES_CELL_1,\r\n    PLAYER_CHOOSES_CELL_2,\r\n    PLAYER_CHOOSES_CELL_3,\r\n    PLAYER_CHOOSES_CELL_4,\r\n    PLAYER_CHOOSES_CELL_5,\r\n    PLAYER_CHOOSES_CELL_6,\r\n    PLAYER_CHOOSES_CELL_7,\r\n    PLAYER_CHOOSES_CELL_8,\r\n    PLAYER_CHOOSES_CELL_9\r\n} from '../actions/playerActions';\r\n\r\n// Computer AI actions\r\nimport { \r\n    COMPUTER_CHOOSES_CELL_1,\r\n    COMPUTER_CHOOSES_CELL_2,\r\n    COMPUTER_CHOOSES_CELL_3,\r\n    COMPUTER_CHOOSES_CELL_4,\r\n    COMPUTER_CHOOSES_CELL_5,\r\n    COMPUTER_CHOOSES_CELL_6,\r\n    COMPUTER_CHOOSES_CELL_7,\r\n    COMPUTER_CHOOSES_CELL_8,\r\n    COMPUTER_CHOOSES_CELL_9\r\n} from '../actions/computerActions';\r\n\r\n// Reset action (resets the entire game including the board)\r\nimport { RESET } from '../actions/resetActions';\r\n\r\nimport { initialState } from '../store/store';\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        // Players' turn\r\n        case PLAYER_CHOOSES_CELL_1:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_2:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_3:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_4:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_5:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_6:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_7:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_8:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case PLAYER_CHOOSES_CELL_9:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.player, ...state.board.slice(action.index + 1)]\r\n            }\r\n\r\n\r\n        // Computers' turn\r\n        case COMPUTER_CHOOSES_CELL_1:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_2:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_3:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_4:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_5:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_6:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_7:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_8:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n        case COMPUTER_CHOOSES_CELL_9:\r\n            return {\r\n                board: [...state.board.slice(0, action.index), action.computer, ...state.board.slice(action.index + 1)]\r\n            }\r\n\r\n        case RESET:\r\n            return {\r\n                board: initialState.board\r\n            }\r\n        default:        \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default boardReducer;","export const PLAYER_CHOOSES_CELL_1 = \"PLAYER_CHOOSES_CELL_1\";\r\nexport const PLAYER_CHOOSES_CELL_2 = \"PLAYER_CHOOSES_CELL_2\";\r\nexport const PLAYER_CHOOSES_CELL_3 = \"PLAYER_CHOOSES_CELL_3\";\r\n\r\nexport const PLAYER_CHOOSES_CELL_4 = \"PLAYER_CHOOSES_CELL_4\";\r\nexport const PLAYER_CHOOSES_CELL_5 = \"PLAYER_CHOOSES_CELL_5\";\r\nexport const PLAYER_CHOOSES_CELL_6 = \"PLAYER_CHOOSES_CELL_6\";\r\n\r\nexport const PLAYER_CHOOSES_CELL_7 = \"PLAYER_CHOOSES_CELL_7\";\r\nexport const PLAYER_CHOOSES_CELL_8 = \"PLAYER_CHOOSES_CELL_8\";\r\nexport const PLAYER_CHOOSES_CELL_9 = \"PLAYER_CHOOSES_CELL_9\";\r\n\r\n/* Action creators for when the player chooses a cell to fill */\r\nexport const playerChoosesCell1 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_1,\r\n            index: 0,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell2 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_2,\r\n            index: 1,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell3 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_3,\r\n            index: 2,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell4 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_4,\r\n            index: 3,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell5 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_5,\r\n            index: 4,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell6 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_6,\r\n            index: 5,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell7 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_7,\r\n            index: 6,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell8 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_8,\r\n            index: 7,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}\r\n\r\nexport const playerChoosesCell9 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: PLAYER_CHOOSES_CELL_9,\r\n            index: 8,\r\n            player: currentState.choiceReducer.player\r\n        });\r\n    }\r\n}","export const COMPUTER_CHOOSES_CELL_1 = \"computer_CHOOSES_CELL_1\";\r\nexport const COMPUTER_CHOOSES_CELL_2 = \"computer_CHOOSES_CELL_2\";\r\nexport const COMPUTER_CHOOSES_CELL_3 = \"computer_CHOOSES_CELL_3\";\r\n\r\nexport const COMPUTER_CHOOSES_CELL_4 = \"computer_CHOOSES_CELL_4\";\r\nexport const COMPUTER_CHOOSES_CELL_5 = \"computer_CHOOSES_CELL_5\";\r\nexport const COMPUTER_CHOOSES_CELL_6 = \"computer_CHOOSES_CELL_6\";\r\n\r\nexport const COMPUTER_CHOOSES_CELL_7 = \"computer_CHOOSES_CELL_7\";\r\nexport const COMPUTER_CHOOSES_CELL_8 = \"computer_CHOOSES_CELL_8\";\r\nexport const COMPUTER_CHOOSES_CELL_9 = \"computer_CHOOSES_CELL_9\";\r\n\r\n/* Action creators for when the computer chooses a cell to fill */\r\nexport const computerChoosesCell1 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_1,\r\n            index: 0,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell2 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_2,\r\n            index: 1,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell3 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_3,\r\n            index: 2,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell4 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_4,\r\n            index: 3,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell5 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_5,\r\n            index: 4,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell6 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_6,\r\n            index: 5,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell7 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_7,\r\n            index: 6,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell8 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_8,\r\n            index: 7,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}\r\n\r\nexport const computerChoosesCell9 = () => {\r\n    return (dispatch, getState) => {\r\n        const currentState = getState();\r\n\r\n        dispatch({\r\n            type: COMPUTER_CHOOSES_CELL_9,\r\n            index: 8,\r\n            computer: currentState.choiceReducer.computer\r\n        });\r\n    }\r\n}","import { initialState } from '../store/store';\r\nimport { COMPUTER_WINS, PLAYER_WINS, DRAW } from '../actions/winnerActions';\r\nimport { RESET } from '../actions/resetActions';\r\n\r\nconst winnerReducer = (state = initialState, action) => {\r\n    if(action.type === COMPUTER_WINS){\r\n        return {\r\n            winner: 'Lose'\r\n        }\r\n    } else if(action.type === PLAYER_WINS){\r\n        return {\r\n            winner: 'Win'\r\n        }\r\n    } else if(action.type === DRAW){\r\n        return {\r\n            winner: 'Tied'\r\n        }\r\n    } else if(action.type === RESET){\r\n        return {\r\n            winner: initialState.endgame.winner\r\n        }\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n\r\nexport default winnerReducer;","export const COMPUTER_WINS = 'COMPUTER_WINS';\r\nexport const PLAYER_WINS = 'PLAYER_WINS';\r\nexport const DRAW = 'DRAW';\r\n\r\nexport const computerWins = () => {\r\n    return {\r\n        type: COMPUTER_WINS\r\n    }\r\n};\r\n\r\nexport const playerWins = () => {\r\n    return {\r\n        type: PLAYER_WINS\r\n    }\r\n};\r\n\r\nexport const draw = () => {\r\n    return {\r\n        type: DRAW\r\n    }\r\n};","import { RENDER_CHOICEANSWER_AND_BOARD } from '../actions/renderActions';\r\nimport { RESET } from '../actions/resetActions';\r\nimport { initialState } from '../store/store';\r\n\r\nconst renderReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case RENDER_CHOICEANSWER_AND_BOARD:\r\n            return {\r\n                ChoiceQuestion: false,\r\n                ChoiceAnswer: true,\r\n                Board: true\r\n            }\r\n        case RESET:\r\n            return {\r\n                ChoiceQuestion: initialState.ChoiceQuestion,\r\n                ChoiceAnswer: initialState.ChoiceAnswer,\r\n                Board: initialState.Board,\r\n                Winner: initialState.Winner\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default renderReducer;","export const RENDER_CHOICEANSWER_AND_BOARD = 'RENDER_CHOICEANSWER_AND_BOARD';\r\n\r\nexport const render_choiceAnswerAndBoard = () => {\r\n    return {\r\n        type: RENDER_CHOICEANSWER_AND_BOARD\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport choiceReducer from '../reducers/choiceReducer';\r\nimport boardReducer from '../reducers/boardReducer';\r\nimport winnerReducer from '../reducers/winnerReducer';\r\nimport renderReducer from '../reducers/renderReducer';\r\n\r\nexport const X = 'X';\r\nexport const O = 'O';\r\n\r\nexport const initialState = {\r\n    choices: {\r\n        player: '',\r\n        computer: ''        \r\n    },\r\n    board: [\r\n        '', '', '',\r\n        '', '', '',\r\n        '', '', ''\r\n    ],\r\n    endgame: {\r\n        winner: ''\r\n    },\r\n    // render components?\r\n    ChoiceQuestion: true,\r\n    ChoiceAnswer: false,\r\n    Board: false,\r\n    Winner: false\r\n}\r\n\r\nexport const store = createStore(\r\n    combineReducers({\r\n        choiceReducer,\r\n        boardReducer,\r\n        winnerReducer,\r\n        renderReducer\r\n    }),\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nstore.subscribe(() => store.getState());\r\n\r\nexport default store;","import React ,{ Component } from 'react';\r\nimport { choosePlayerX, choosePlayerO } from '../actions/choiceActions';\r\nimport { connect } from 'react-redux';\r\nimport { store, X, O } from '../store/store';\r\nimport { render_choiceAnswerAndBoard } from '../actions/renderActions';\r\n\r\nclass ChoiceQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChoice = this.handleChoice.bind(this);\r\n    }\r\n\r\n    handleChoice(e) {\r\n        e.preventDefault();\r\n        if(e.target.id === X){\r\n            store.dispatch(choosePlayerX());\r\n            store.dispatch(render_choiceAnswerAndBoard());\r\n        } else if(e.target.id === O){\r\n            store.dispatch(choosePlayerO());\r\n            store.dispatch(render_choiceAnswerAndBoard());\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.props.ChoiceQuestion === false) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div className=\"choice-container\">\r\n                    <h3 className=\"choice-question\">\r\n                        Play as \r\n                        <button id={X} onClick={this.handleChoice}>X</button>\r\n                        or\r\n                        <button id={O} onClick={this.handleChoice}>O</button>\r\n                        ?\r\n                    </h3>                \r\n                </div>\r\n            );             \r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ChoiceQuestion: state.renderReducer.ChoiceQuestion\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ChoiceQuestion);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nexport class ChoiceAnswer extends Component {\r\n    render() {\r\n        if(this.props.ChoiceAnswer === false){\r\n            return null;\r\n        } else {\r\n            return (\r\n                <h3 className=\"choice-statement\">You are {this.props.player}</h3>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        player: state.choiceReducer.player,\r\n        ChoiceAnswer: state.renderReducer.ChoiceAnswer\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ChoiceAnswer);","import React, { Component } from 'react';\r\nimport { store } from '../store/store';\r\nimport resetGame from '../actions/resetActions';\r\n\r\nclass Reset extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n    \r\n    handleReset(e) {\r\n        e.preventDefault();\r\n        store.dispatch(resetGame());\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <button className=\"resetButton\" onClick={this.handleReset}>Reset</button>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default Reset;","import React, { Component } from 'react';\r\nimport { store } from '../store/store';\r\nimport { connect } from 'react-redux';\r\nimport ReactModal from 'react-modal';\r\nimport Reset from '../components/Reset';\r\n\r\nclass Winner extends Component {\r\n    componentWillMount() {\r\n        ReactModal.setAppElement('body');\r\n    }\r\n\r\n    render() {\r\n        if(store.getState().renderReducer.Winner === false){\r\n            return null;\r\n        } else {\r\n            let winner;\r\n\r\n            if(this.props.endgame === undefined) {\r\n                return null;\r\n            } else if(this.props.endgame !== ''){\r\n                winner = <h3 className=\"winner\">You {this.props.endgame}</h3>\r\n                return (\r\n                    <ReactModal className=\"winner-container\" isOpen={true}>\r\n                        {winner}\r\n                        <Reset />\r\n                    </ReactModal>\r\n                );  \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        endgame: state.winnerReducer.winner\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Winner);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { store } from '../store/store';\r\nimport { playerChoosesCell1,\r\n         playerChoosesCell2, \r\n         playerChoosesCell3, \r\n         playerChoosesCell4, \r\n         playerChoosesCell5, \r\n         playerChoosesCell6, \r\n         playerChoosesCell7, \r\n         playerChoosesCell8, \r\n         playerChoosesCell9 } from '../actions/playerActions';\r\n\r\nimport { computerChoosesCell1,\r\n         computerChoosesCell2, \r\n         computerChoosesCell3, \r\n         computerChoosesCell4, \r\n         computerChoosesCell5, \r\n         computerChoosesCell6, \r\n         computerChoosesCell7, \r\n         computerChoosesCell8, \r\n         computerChoosesCell9 } from '../actions/computerActions';\r\n\r\nimport { computerWins, \r\n         playerWins,\r\n         draw } from '../actions/winnerActions';\r\n\r\n// Implemented MiniMax Algorithm solution from https://medium.freecodecamp.org/how-to-make-your-tic-tac-toe-game-unbeatable-by-using-the-minimax-algorithm-9d690bad4b37\r\n\r\nconst winning = (board, player) => {\r\n    if (\r\n        (board[0] === player && board[1] === player && board[2] === player) ||\r\n        (board[3] === player && board[4] === player && board[5] === player) ||\r\n        (board[6] === player && board[7] === player && board[8] === player) ||\r\n        (board[0] === player && board[3] === player && board[6] === player) ||\r\n        (board[1] === player && board[4] === player && board[7] === player) ||\r\n        (board[2] === player && board[5] === player && board[8] === player) ||\r\n        (board[0] === player && board[4] === player && board[8] === player) ||\r\n        (board[2] === player && board[4] === player && board[6] === player)\r\n    ) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// available cells on the board\r\nconst availableCells = (board) => board.filter(cell => cell !== 'X' && cell !== 'O');\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.determineWinner = this.determineWinner.bind(this);\r\n        this.handleCellClick = this.handleCellClick.bind(this);\r\n        this.computersTurn = this.computersTurn.bind(this);\r\n    }\r\n\r\n    determineWinner() {\r\n        const humanPlayer = store.getState().choiceReducer.player;\r\n        const aiPlayer = store.getState().choiceReducer.computer;\r\n        let currentBoard = store.getState().boardReducer.board;\r\n\r\n        // available cells\r\n        let availSpots = availableCells(currentBoard);\r\n\r\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n        if (winning(currentBoard, humanPlayer)){\r\n            store.dispatch(playerWins());\r\n        } else if (winning(currentBoard, aiPlayer)){\r\n            store.dispatch(computerWins());\r\n        } else if ((winning(currentBoard, humanPlayer) === false) && (winning(currentBoard, aiPlayer) === false) && (availSpots.length === 0)){\r\n            store.dispatch(draw());\r\n        }\r\n    }\r\n\r\n    computersTurn() {\r\n        const humanPlayer = store.getState().choiceReducer.player;\r\n        const aiPlayer = store.getState().choiceReducer.computer;\r\n        let currentBoard = store.getState().boardReducer.board;\r\n\r\n        // modify currentBoard by replacing any '' values with their index\r\n        let indexBoard = currentBoard.map((cell, index) => cell || index);\r\n\r\n        const minimax = (newBoard, player) => {\r\n            // available cells\r\n            let availSpots = availableCells(newBoard);\r\n\r\n            // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n            if (winning(newBoard, humanPlayer)){\r\n                return {score: -10};\r\n            } else if (winning(newBoard, aiPlayer)){\r\n                return {score: 10};\r\n            } else if (availSpots.length === 0){\r\n                return {score: 0}\r\n            }\r\n\r\n            // an array to collect all the move objects\r\n            let moves = [];\r\n\r\n            // loop through available spots\r\n            for (let i = 0; i < availSpots.length; i++) {\r\n                //create an object for each and store the index of that spot\r\n                let move = {};\r\n                    move.index = newBoard[availSpots[i]];\r\n\r\n                // set the empty spot to the current player\r\n                newBoard[availSpots[i]] = player;\r\n\r\n                /*collect the score resulted from calling minimax \r\n                    on the opponent of the current player*/\r\n                if (player === aiPlayer) {\r\n                    let result = minimax(newBoard, humanPlayer);\r\n                    move.score = result.score;\r\n                } else {\r\n                    let result = minimax(newBoard, aiPlayer);\r\n                    move.score = result.score;\r\n                }\r\n\r\n                // reset the spot to empty\r\n                newBoard[availSpots[i]] = move.index;\r\n\r\n                // push the object to the array\r\n                moves.push(move);\r\n            }\r\n\r\n            // if it is the computer's turn loop over the moves and choose the move with the highest score            \r\n            let bestMove;\r\n            if (player === aiPlayer){\r\n                let bestScore = -10000;\r\n                for (let i = 0; i < moves.length; i++){\r\n                    if (moves[i].score > bestScore){\r\n                        bestScore = moves[i].score;\r\n                        bestMove = i;\r\n                    }\r\n                }\r\n            } else {\r\n                // else loop over the moves and choose the move with the lowest score\r\n                let bestScore = 10000;\r\n                for (let i = 0; i < moves.length; i++){\r\n                    if (moves[i].score < bestScore){\r\n                        bestScore = moves[i].score;\r\n                        bestMove = i;                        \r\n                    }\r\n                }\r\n            }\r\n\r\n            // return the chosen move (object) from the moves array\r\n            return moves[bestMove];\r\n        }\r\n\r\n        // finding the ultimate play on the game that favors the computer\r\n        var bestSpot = minimax(indexBoard, aiPlayer);\r\n\r\n        switch(bestSpot.index){\r\n            case 0:\r\n                store.dispatch(computerChoosesCell1());\r\n                this.determineWinner();                \r\n                break;\r\n            case 1:\r\n                store.dispatch(computerChoosesCell2());\r\n                this.determineWinner();                \r\n                break;\r\n            case 2:\r\n                store.dispatch(computerChoosesCell3());\r\n                this.determineWinner();                \r\n                break;\r\n            case 3:\r\n                store.dispatch(computerChoosesCell4());\r\n                this.determineWinner();               \r\n                break;\r\n            case 4:\r\n                store.dispatch(computerChoosesCell5());\r\n                this.determineWinner();                \r\n                break;\r\n            case 5:\r\n                store.dispatch(computerChoosesCell6());\r\n                this.determineWinner();                \r\n                break;\r\n            case 6:\r\n                store.dispatch(computerChoosesCell7());\r\n                this.determineWinner();                \r\n                break;\r\n            case 7:\r\n                store.dispatch(computerChoosesCell8());\r\n                this.determineWinner();                \r\n                break;\r\n            case 8:\r\n                store.dispatch(computerChoosesCell9());\r\n                this.determineWinner();                \r\n                break;\r\n            default:\r\n                console.log('no bestSpot left!');\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleCellClick(e) {\r\n        e.preventDefault();\r\n        if(e.target.innerHTML === ''){\r\n            switch(e.target.id){\r\n                case \"cell-1\":\r\n                    store.dispatch(playerChoosesCell1());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-2\":\r\n                    store.dispatch(playerChoosesCell2());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-3\":\r\n                    store.dispatch(playerChoosesCell3());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-4\":\r\n                    store.dispatch(playerChoosesCell4());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-5\":\r\n                    store.dispatch(playerChoosesCell5());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-6\":\r\n                    store.dispatch(playerChoosesCell6());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-7\":\r\n                    store.dispatch(playerChoosesCell7());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-8\":\r\n                    store.dispatch(playerChoosesCell8());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                case \"cell-9\":\r\n                    store.dispatch(playerChoosesCell9());\r\n                    this.determineWinner();                    \r\n                    this.computersTurn();\r\n                    break;\r\n                default:\r\n                    console.log('click a cell');\r\n                    break;\r\n            }                    \r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.props.player) {\r\n            return (\r\n                <div className=\"board-container\">              \r\n                    <div className=\"row\">\r\n                        <div className=\"cell\" id=\"cell-1\" onClick={this.handleCellClick}>{this.props.board[0]}</div>\r\n                        <div className=\"cell\" id=\"cell-2\" onClick={this.handleCellClick}>{this.props.board[1]}</div>\r\n                        <div className=\"cell\" id=\"cell-3\" onClick={this.handleCellClick}>{this.props.board[2]}</div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"cell\" id=\"cell-4\" onClick={this.handleCellClick}>{this.props.board[3]}</div>\r\n                        <div className=\"cell\" id=\"cell-5\" onClick={this.handleCellClick}>{this.props.board[4]}</div>\r\n                        <div className=\"cell\" id=\"cell-6\" onClick={this.handleCellClick}>{this.props.board[5]}</div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"cell\" id=\"cell-7\" onClick={this.handleCellClick}>{this.props.board[6]}</div>\r\n                        <div className=\"cell\" id=\"cell-8\" onClick={this.handleCellClick}>{this.props.board[7]}</div>\r\n                        <div className=\"cell\" id=\"cell-9\" onClick={this.handleCellClick}>{this.props.board[8]}</div>\r\n                    </div>\r\n                </div>\r\n            );            \r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        board: state.boardReducer.board,\r\n        player: state.choiceReducer.player\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Board);","import React, { Component } from 'react';\r\nimport react from '../react.svg';\r\nimport redux from '../redux.svg';\r\nimport Tooltip from \"react-simple-tooltip\";\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n      return (\r\n        <footer>\r\n          <div className=\"builtWith\">\r\n            Built with <Tooltip content=\"React\"><img src={react} className=\"App-logo\" alt=\"logo\" /></Tooltip>+<Tooltip content=\"Redux\"><img src={redux} className=\"App-logo\" alt=\"logo\" /></Tooltip>\r\n          </div>\r\n            \r\n            <a href=\"https://github.com/AmitP88/Tic-Tac-Toe-React-Redux\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <i className=\"fa fa-github fa-4x\"></i>\r\n            </a>      \r\n            <p>Developed by <a href=\"https://github.com/AmitP88\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"github-profile-link\">Amit Patel</a></p>      \r\n        </footer>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './media_queries.css';\r\nimport ChoiceQuestion from './components/ChoiceQuestion';\r\nimport ChoiceAnswer from './components/ChoiceAnswer';\r\nimport Winner from './components/Winner';\r\nimport Board from './components/Board';\r\nimport Footer from './components/Footer';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <Provider store={store}>\r\n          <div className=\"App\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <ChoiceQuestion />\r\n            <ChoiceAnswer />\r\n            <Board />\r\n            <Winner />\r\n            <Footer />\r\n          </div>        \r\n        </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}